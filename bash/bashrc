#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# blesh (must be after interactivity test)
# [[ $- == *i* ]] && source /usr/share/blesh/ble.sh --rcfile "$HOME/.blerc"

# default configuration
alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

# mimic zsh run-help (alt-h) ability
run-help() { help "$READLINE_LINE" 2>/dev/null || man "$READLINE_LINE"; }
bind -m vi-insert -x '"\eh": run-help'
bind -m emacs -x '"\eh": run-help'

# aliases
if [ -f "/usr/bin/lsd" ]; then
	alias ls=lsd
fi

# command-not-found (pkgfile)
source /usr/share/doc/pkgfile/command-not-found.bash

# pyenv
if [ -d "$HOME/.pyenv" ]; then
	export PYENV_ROOT="$HOME/.pyenv"
	command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
	eval "$(pyenv init -)"
fi

# nvm
if [ -d "$HOME/.nvm" ]; then
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
fi

# flyctl
if [ -d "$HOME/.fly" ]; then
	export FLYCTL_INSTALL="/home/jeremy0914/.fly"
	export PATH="$FLYCTL_INSTALL/bin:$PATH"
fi

# fetch
fetch_bins=( "/usr/bin/wslfetch" "/usr/bin/neofetch" "/usr/bin/screenfetch" )
for fetch_bin in "${fetch_bins[@]}"; do
	if [ -f "$fetch_bin" ]; then
		eval "$fetch_bin"
		break
	fi
done

# starship prompt
if [ -f "/usr/bin/starship" ]; then
	eval "$(starship init bash)"
fi

# gpg fix for wsl
export GPG_TTY=$(tty)

# blesh - final attach with starship (must be at the end)
# [[ ${BLE_VERSION-} ]] && ble-attach
